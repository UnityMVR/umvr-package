// <auto-generated>
//	 This code was generated by a tool.
//
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>

using pindwin.umvr.Model;
using pindwin.umvr.Reactor;
using pindwin.umvr.Repository;
using pindwin.umvr.Serialization;
using Zenject;

namespace Model.TestModel
{
	public partial class TestModelFactory : ModelFactory<ITestModel, TestModelModel, System.Int32, System.String, System.Int32>
	{
		public TestModelFactory(IRepository<ITestModel> repository, [InjectOptional] ISerializer<TestModelModel> serializer) : base(repository, serializer)
		{ }
	}

	public partial class TestModelRepository : Repository<ITestModel, TestModelModel, TestModelReactor>
	{
		public TestModelRepository(TestModelReactorFactory testModelReactorFactory) : base(testModelReactorFactory)
		{ }
	}
	
	public class TestModelReactorFactory : ReactorFactory<TestModelModel, TestModelReactor>
	{ }
}

namespace Model.TestModel.Generated
{
	public class TestModelInstallerBase : Installer<TestModelInstallerBase>
	{
		public override void InstallBindings()
		{
			Container.BindFactory<Id, System.Int32, System.String, System.Int32, TestModelModel, TestModelFactory>();
			Container.Bind<IModelFactory<ITestModel, System.Int32, System.String, System.Int32>>().To<TestModelFactory>().FromResolve();
			Container.BindFactory<TestModelModel, TestModelReactor, TestModelReactorFactory>();
			Container.BindInterfacesAndSelfTo<TestModelRepository>().AsSingle();
		}
	}
}