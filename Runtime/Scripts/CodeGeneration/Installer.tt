<#@ template debug="false" hostspecific="true" language="C#v3.5" #>
<# 
	GenerationParams.GenSettings settings = ((pindwin.umvr.Editor.Generation.UMVRTemplateGenerator)Host).Settings;
	GenerationParams.GenConcreteModel model = settings.GenConcreteModel;
	GenerationParams.GenConcreteFactory factory = settings.GenConcreteFactory;
	GenerationParams.GenReactor reactor = settings.GenReactor;
	GenerationParams.GenRepository repository = settings.GenRepository;
	GenerationParams.GenReactorFactory reactorFactory = settings.GenReactorFactory;
#>
<#@ include file="AutoGenerated.ttinclude" #>

using pindwin.umvr.Model;
using pindwin.umvr.Reactor;
using pindwin.umvr.Repository;
using pindwin.umvr.Serialization;
using Zenject;

namespace <#= model.Namespace #>
{
	<#= factory.ToDeclarationString("	") #>
	{
		<#= factory.Constructors[0].ToSignatureString()#>
		{ }
	}

	<#= repository.ToDeclarationString("	") #>
	{
		<#= repository.Constructors[0].ToSignatureString()#>
		{ }
	}
	
	<#= reactorFactory.ToDeclarationString("	") #>
	{ }
}

namespace <#= model.Namespace #>.Generated
{
	public class <#= model.Name #>InstallerBase : Installer<<#= model.Name #>InstallerBase>
	{
		public override void InstallBindings()
		{
			Container.BindFactory<Id<#= factory.GetBindingGenericParametersString() #>, <#= model.Type#>, <#= factory.Type#>>();
			Container.Bind<IModelFactory<I<#= model.Name #><#= factory.GetBindingGenericParametersString() #>>>().To<<#= factory.Type#>>().FromResolve();
			Container.Bind<IModelFactory>().To<<#= factory.Type#>>().FromResolve();
			Container.BindFactory<<#= model.Type#>, <#= reactor.Type#>, <#= reactorFactory.Type#>>();
			Container.BindInterfacesAndSelfTo<<#= repository.Type #>>().AsSingle();
		}
	}
}